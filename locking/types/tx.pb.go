// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aether/locking/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateLockedDelegation defines a SDK message for creating a locked delegation
type MsgCreateLockedDelegation struct {
	// delegator_address is the target delegator address
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// validator_address is the target validator address
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// validator_address is the amount that will delegated and locked
	Amount types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	// lock_duration is for how long the locking will last
	LockDuration time.Duration `protobuf:"bytes,4,opt,name=lock_duration,json=lockDuration,proto3,stdduration" json:"lock_duration"`
	// auto_renew defines if the delegator wants to auto renew the locking after expiration
	AutoRenew bool `protobuf:"varint,5,opt,name=auto_renew,json=autoRenew,proto3" json:"auto_renew,omitempty"`
}

func (m *MsgCreateLockedDelegation) Reset()         { *m = MsgCreateLockedDelegation{} }
func (m *MsgCreateLockedDelegation) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLockedDelegation) ProtoMessage()    {}
func (*MsgCreateLockedDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_282d618ca7eabb4c, []int{0}
}
func (m *MsgCreateLockedDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLockedDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLockedDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLockedDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLockedDelegation.Merge(m, src)
}
func (m *MsgCreateLockedDelegation) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLockedDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLockedDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLockedDelegation proto.InternalMessageInfo

// MsgCreateLockedDelegationResponse defines the Msg/CreateLockedDelegation response type.
type MsgCreateLockedDelegationResponse struct {
}

func (m *MsgCreateLockedDelegationResponse) Reset()         { *m = MsgCreateLockedDelegationResponse{} }
func (m *MsgCreateLockedDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLockedDelegationResponse) ProtoMessage()    {}
func (*MsgCreateLockedDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_282d618ca7eabb4c, []int{1}
}
func (m *MsgCreateLockedDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLockedDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLockedDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLockedDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLockedDelegationResponse.Merge(m, src)
}
func (m *MsgCreateLockedDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLockedDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLockedDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLockedDelegationResponse proto.InternalMessageInfo

// MsgRedelegateLockedDelegation defines a SDK message for performing a redelegation
// of locked delegations
type MsgRedelegateLockedDelegations struct {
	// delegator_address is the delegator address, the signer
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// validator_src_address is the source validator address
	ValidatorSrcAddress string `protobuf:"bytes,2,opt,name=validator_src_address,json=validatorSrcAddress,proto3" json:"validator_src_address,omitempty"`
	// validator_dst_address is the target validator address
	ValidatorDstAddress string `protobuf:"bytes,3,opt,name=validator_dst_address,json=validatorDstAddress,proto3" json:"validator_dst_address,omitempty"`
	// ids are all the locked delegation ids that will move between the source and destination validators
	Ids []uint64 `protobuf:"varint,4,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *MsgRedelegateLockedDelegations) Reset()         { *m = MsgRedelegateLockedDelegations{} }
func (m *MsgRedelegateLockedDelegations) String() string { return proto.CompactTextString(m) }
func (*MsgRedelegateLockedDelegations) ProtoMessage()    {}
func (*MsgRedelegateLockedDelegations) Descriptor() ([]byte, []int) {
	return fileDescriptor_282d618ca7eabb4c, []int{2}
}
func (m *MsgRedelegateLockedDelegations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedelegateLockedDelegations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedelegateLockedDelegations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedelegateLockedDelegations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedelegateLockedDelegations.Merge(m, src)
}
func (m *MsgRedelegateLockedDelegations) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedelegateLockedDelegations) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedelegateLockedDelegations.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedelegateLockedDelegations proto.InternalMessageInfo

// MsgRedelegateLockedDelegationsResponse defines the Msg/MsgRedelegateLockedDelegation response type.
type MsgRedelegateLockedDelegationsResponse struct {
	CompletionTime time.Time `protobuf:"bytes,1,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time"`
}

func (m *MsgRedelegateLockedDelegationsResponse) Reset() {
	*m = MsgRedelegateLockedDelegationsResponse{}
}
func (m *MsgRedelegateLockedDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRedelegateLockedDelegationsResponse) ProtoMessage()    {}
func (*MsgRedelegateLockedDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_282d618ca7eabb4c, []int{3}
}
func (m *MsgRedelegateLockedDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedelegateLockedDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedelegateLockedDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedelegateLockedDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedelegateLockedDelegationsResponse.Merge(m, src)
}
func (m *MsgRedelegateLockedDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedelegateLockedDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedelegateLockedDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedelegateLockedDelegationsResponse proto.InternalMessageInfo

func (m *MsgRedelegateLockedDelegationsResponse) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

// MsgToggleAutoRenew defines a SDK message for performing a auto renew flag flip on a
// locked delegation entry
type MsgToggleAutoRenew struct {
	// delegator_address is the delegator address, the signer
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// validator_address is the validator address
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// id is the id of the entry that will have the flag turned
	Id uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgToggleAutoRenew) Reset()         { *m = MsgToggleAutoRenew{} }
func (m *MsgToggleAutoRenew) String() string { return proto.CompactTextString(m) }
func (*MsgToggleAutoRenew) ProtoMessage()    {}
func (*MsgToggleAutoRenew) Descriptor() ([]byte, []int) {
	return fileDescriptor_282d618ca7eabb4c, []int{4}
}
func (m *MsgToggleAutoRenew) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleAutoRenew) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleAutoRenew.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleAutoRenew) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleAutoRenew.Merge(m, src)
}
func (m *MsgToggleAutoRenew) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleAutoRenew) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleAutoRenew.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleAutoRenew proto.InternalMessageInfo

// MsgToggleAutoRenewResponse defines the Msg/MsgToggleAutoRenew response type.
type MsgToggleAutoRenewResponse struct {
}

func (m *MsgToggleAutoRenewResponse) Reset()         { *m = MsgToggleAutoRenewResponse{} }
func (m *MsgToggleAutoRenewResponse) String() string { return proto.CompactTextString(m) }
func (*MsgToggleAutoRenewResponse) ProtoMessage()    {}
func (*MsgToggleAutoRenewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_282d618ca7eabb4c, []int{5}
}
func (m *MsgToggleAutoRenewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleAutoRenewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleAutoRenewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleAutoRenewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleAutoRenewResponse.Merge(m, src)
}
func (m *MsgToggleAutoRenewResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleAutoRenewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleAutoRenewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleAutoRenewResponse proto.InternalMessageInfo

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/locking parameters to update.
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_282d618ca7eabb4c, []int{6}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_282d618ca7eabb4c, []int{7}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateLockedDelegation)(nil), "aether.locking.v1beta1.MsgCreateLockedDelegation")
	proto.RegisterType((*MsgCreateLockedDelegationResponse)(nil), "aether.locking.v1beta1.MsgCreateLockedDelegationResponse")
	proto.RegisterType((*MsgRedelegateLockedDelegations)(nil), "aether.locking.v1beta1.MsgRedelegateLockedDelegations")
	proto.RegisterType((*MsgRedelegateLockedDelegationsResponse)(nil), "aether.locking.v1beta1.MsgRedelegateLockedDelegationsResponse")
	proto.RegisterType((*MsgToggleAutoRenew)(nil), "aether.locking.v1beta1.MsgToggleAutoRenew")
	proto.RegisterType((*MsgToggleAutoRenewResponse)(nil), "aether.locking.v1beta1.MsgToggleAutoRenewResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "aether.locking.v1beta1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "aether.locking.v1beta1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("aether/locking/v1beta1/tx.proto", fileDescriptor_282d618ca7eabb4c) }

var fileDescriptor_282d618ca7eabb4c = []byte{
	// 792 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0x8e, 0x93, 0xb4, 0x6a, 0xa7, 0xff, 0xbe, 0xbd, 0x6d, 0xe2, 0x7b, 0xeb, 0x04, 0x57, 0x82,
	0x28, 0x52, 0x6d, 0x35, 0x48, 0x95, 0xa8, 0x2a, 0x44, 0xd3, 0x22, 0x21, 0xd1, 0x48, 0xc8, 0x2d,
	0x1b, 0x36, 0x91, 0x63, 0x0f, 0x13, 0xab, 0xb1, 0x27, 0x78, 0x26, 0x85, 0x4a, 0x2c, 0x10, 0x0b,
	0x84, 0xba, 0xaa, 0x90, 0x90, 0x58, 0xb0, 0xe8, 0x92, 0x65, 0x17, 0x3c, 0x44, 0x97, 0x15, 0x2b,
	0x56, 0x14, 0xa5, 0x8b, 0xf2, 0x00, 0x3c, 0x00, 0x1a, 0x7b, 0xec, 0x90, 0xa4, 0x49, 0x03, 0x62,
	0xc1, 0x26, 0xf1, 0x9c, 0xf9, 0xce, 0x77, 0x7e, 0xbe, 0xe3, 0x63, 0x90, 0x31, 0x20, 0xad, 0x42,
	0x4f, 0xab, 0x61, 0x73, 0xd7, 0x76, 0x91, 0xb6, 0xb7, 0x5c, 0x81, 0xd4, 0x58, 0xd6, 0xe8, 0x33,
	0xb5, 0xee, 0x61, 0x8a, 0xc5, 0xb9, 0x00, 0xa0, 0x72, 0x80, 0xca, 0x01, 0xd2, 0x2c, 0xc2, 0x08,
	0xfb, 0x10, 0x8d, 0x3d, 0x05, 0x68, 0x49, 0x46, 0x18, 0xa3, 0x1a, 0xd4, 0xfc, 0x53, 0xa5, 0xf1,
	0x58, 0xb3, 0x1a, 0x9e, 0x41, 0x6d, 0xec, 0xf2, 0xfb, 0x4c, 0xe7, 0x3d, 0xb5, 0x1d, 0x48, 0xa8,
	0xe1, 0xd4, 0x39, 0x20, 0x6d, 0x62, 0xe2, 0x60, 0x52, 0x0e, 0x98, 0x83, 0x43, 0xc8, 0x1d, 0x9c,
	0xb4, 0x8a, 0x41, 0x60, 0x94, 0xa7, 0x89, 0xed, 0x90, 0x7b, 0x9e, 0xdf, 0x3b, 0x84, 0x95, 0xc1,
	0xfe, 0xf8, 0xc5, 0x8c, 0xe1, 0xd8, 0x2e, 0xd6, 0xfc, 0x5f, 0x6e, 0x5a, 0xec, 0x51, 0x76, 0xdd,
	0xf0, 0x0c, 0x87, 0x07, 0x54, 0xde, 0x24, 0x40, 0xba, 0x44, 0xd0, 0x86, 0x07, 0x0d, 0x0a, 0xb7,
	0xb0, 0xb9, 0x0b, 0xad, 0x4d, 0x58, 0x83, 0xc8, 0x2f, 0x48, 0xbc, 0x0b, 0x66, 0xac, 0xe0, 0x84,
	0xbd, 0xb2, 0x61, 0x59, 0x1e, 0x24, 0x24, 0x25, 0x64, 0x85, 0xdc, 0x68, 0x31, 0xf5, 0xe9, 0xe3,
	0xd2, 0x2c, 0xcf, 0x7d, 0x3d, 0xb8, 0xd9, 0xa6, 0x9e, 0xed, 0x22, 0x7d, 0x3a, 0x72, 0xe1, 0x76,
	0x46, 0xb3, 0x67, 0xd4, 0x6c, 0xab, 0x8d, 0x26, 0x7e, 0x15, 0x4d, 0xe4, 0x12, 0xd2, 0xac, 0x81,
	0x61, 0xc3, 0xc1, 0x0d, 0x97, 0xa6, 0x12, 0x59, 0x21, 0x37, 0x56, 0x48, 0xab, 0xdc, 0x91, 0x75,
	0x2b, 0x14, 0x4d, 0xdd, 0xc0, 0xb6, 0x5b, 0x1c, 0x3d, 0xf9, 0x92, 0x89, 0x7d, 0xb8, 0x38, 0xce,
	0x0b, 0x3a, 0xf7, 0x11, 0xef, 0x81, 0x09, 0xd6, 0x89, 0x72, 0xa8, 0x56, 0x2a, 0xc9, 0x49, 0x02,
	0xb9, 0xd4, 0x50, 0x2e, 0x75, 0x93, 0x03, 0x8a, 0x23, 0x8c, 0xe4, 0xdd, 0x59, 0x46, 0xd0, 0xc7,
	0x99, 0x67, 0x68, 0x17, 0x17, 0x00, 0x30, 0x1a, 0x14, 0x97, 0x3d, 0xe8, 0xc2, 0xa7, 0xa9, 0xa1,
	0xac, 0x90, 0x1b, 0xd1, 0x47, 0x99, 0x45, 0x67, 0x86, 0xd5, 0x3b, 0xaf, 0x8f, 0x32, 0xb1, 0x6f,
	0x47, 0x99, 0xd8, 0xcb, 0x8b, 0xe3, 0x7c, 0x77, 0xff, 0x0e, 0x2e, 0x8e, 0xf3, 0x0b, 0x5c, 0x9a,
	0xcb, 0xdb, 0xae, 0x2c, 0x82, 0x6b, 0x3d, 0x35, 0xd1, 0x21, 0xa9, 0x63, 0x97, 0x40, 0xa5, 0x19,
	0x07, 0x72, 0x89, 0x20, 0x1d, 0xf2, 0x08, 0x5d, 0x48, 0xf2, 0xa7, 0xe4, 0xdb, 0x02, 0xff, 0xb6,
	0xe4, 0x23, 0x9e, 0x39, 0xb0, 0x84, 0xff, 0x44, 0x6e, 0xdb, 0x9e, 0x79, 0x29, 0x9b, 0x45, 0x68,
	0xc4, 0x96, 0x18, 0x98, 0x6d, 0x93, 0xd0, 0x90, 0x6d, 0x1a, 0x24, 0x6c, 0x8b, 0xa4, 0x92, 0xd9,
	0x44, 0x2e, 0xa9, 0xb3, 0xc7, 0xd5, 0xfb, 0x57, 0xb7, 0x3f, 0x17, 0xf0, 0x2f, 0x11, 0x6b, 0x57,
	0xeb, 0xdb, 0x42, 0xe5, 0x39, 0xb8, 0xde, 0xbf, 0xc7, 0xa1, 0x1c, 0xa2, 0x0e, 0xa6, 0x4c, 0xec,
	0xd4, 0x6b, 0x90, 0x99, 0xcb, 0xec, 0x95, 0xf7, 0x3b, 0x3d, 0x56, 0x90, 0xba, 0x06, 0x6c, 0x27,
	0xdc, 0x07, 0xc5, 0x09, 0x36, 0x61, 0x87, 0x67, 0x19, 0x21, 0x18, 0xd5, 0xc9, 0x16, 0x03, 0xc3,
	0x28, 0xdf, 0x05, 0x20, 0x96, 0x08, 0xda, 0xc1, 0x08, 0xd5, 0xe0, 0x7a, 0x38, 0x60, 0x7f, 0xd9,
	0x5b, 0x39, 0x09, 0xe2, 0xb6, 0xe5, 0x8b, 0x97, 0xd4, 0xe3, 0xb6, 0x35, 0xd0, 0xf8, 0xb7, 0xf7,
	0xbf, 0xa3, 0x3e, 0xe5, 0x7f, 0x20, 0x75, 0x5b, 0xa3, 0xb9, 0x7f, 0x2f, 0x80, 0xa9, 0x12, 0x41,
	0x0f, 0xeb, 0x96, 0x41, 0xe1, 0x03, 0x7f, 0x97, 0x89, 0x2b, 0x80, 0xbd, 0x7f, 0x55, 0xec, 0xd9,
	0x74, 0xff, 0xca, 0x4e, 0xb4, 0xa0, 0xe2, 0x3a, 0x18, 0x0e, 0xb6, 0xa1, 0x5f, 0xf7, 0x58, 0x41,
	0x56, 0x2f, 0xff, 0x12, 0xa8, 0x41, 0x9c, 0xb6, 0xb5, 0x12, 0x38, 0xae, 0x4e, 0xb2, 0x32, 0x5b,
	0x94, 0x4a, 0x1a, 0xcc, 0x77, 0x64, 0x17, 0x66, 0x5e, 0x38, 0x48, 0x82, 0x44, 0x89, 0x20, 0xf1,
	0x95, 0x00, 0xe6, 0x7a, 0x2c, 0xdc, 0xe5, 0x5e, 0x09, 0xf4, 0xdc, 0x07, 0xd2, 0xad, 0x5f, 0x76,
	0x89, 0x66, 0xf6, 0xad, 0x00, 0xfe, 0xeb, 0xb7, 0x3f, 0x56, 0xfa, 0x50, 0xf7, 0xf1, 0x93, 0x6e,
	0xff, 0x9e, 0x5f, 0x94, 0xd7, 0x13, 0x30, 0xd5, 0x39, 0xf3, 0xf9, 0x3e, 0x94, 0x1d, 0x58, 0xa9,
	0x30, 0x38, 0x36, 0x0a, 0x59, 0x05, 0xe3, 0x6d, 0x13, 0x75, 0xa3, 0x0f, 0xc7, 0xcf, 0x40, 0x49,
	0x1b, 0x10, 0x18, 0x46, 0x92, 0x86, 0x5e, 0xb0, 0xf9, 0x29, 0xae, 0x9d, 0x34, 0x65, 0xe1, 0xb4,
	0x29, 0x0b, 0x5f, 0x9b, 0xb2, 0x70, 0x78, 0x2e, 0xc7, 0x4e, 0xcf, 0xe5, 0xd8, 0xe7, 0x73, 0x39,
	0xf6, 0x48, 0x41, 0x36, 0xad, 0x36, 0x2a, 0xaa, 0x89, 0x1d, 0x2d, 0xe0, 0x86, 0x7b, 0x4e, 0xf4,
	0x15, 0xa7, 0xfb, 0x75, 0x48, 0x2a, 0xc3, 0xfe, 0x32, 0xb9, 0xf9, 0x23, 0x00, 0x00, 0xff, 0xff,
	0x95, 0x5e, 0x09, 0x13, 0xdb, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateLockedDelegation defines a method for creating a new locked delegation.
	CreateLockedDelegation(ctx context.Context, in *MsgCreateLockedDelegation, opts ...grpc.CallOption) (*MsgCreateLockedDelegationResponse, error)
	// RedelegateLockedDelegation defines a method for performing a redelegation
	// of locked delegations
	RedelegateLockedDelegations(ctx context.Context, in *MsgRedelegateLockedDelegations, opts ...grpc.CallOption) (*MsgRedelegateLockedDelegationsResponse, error)
	// ToggleAutoRenew toogles the auto renew flag in a locked delegation entry
	ToggleAutoRenew(ctx context.Context, in *MsgToggleAutoRenew, opts ...grpc.CallOption) (*MsgToggleAutoRenewResponse, error)
	// UpdateParams defines an operation for updating the x/locking module parameters
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateLockedDelegation(ctx context.Context, in *MsgCreateLockedDelegation, opts ...grpc.CallOption) (*MsgCreateLockedDelegationResponse, error) {
	out := new(MsgCreateLockedDelegationResponse)
	err := c.cc.Invoke(ctx, "/aether.locking.v1beta1.Msg/CreateLockedDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RedelegateLockedDelegations(ctx context.Context, in *MsgRedelegateLockedDelegations, opts ...grpc.CallOption) (*MsgRedelegateLockedDelegationsResponse, error) {
	out := new(MsgRedelegateLockedDelegationsResponse)
	err := c.cc.Invoke(ctx, "/aether.locking.v1beta1.Msg/RedelegateLockedDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ToggleAutoRenew(ctx context.Context, in *MsgToggleAutoRenew, opts ...grpc.CallOption) (*MsgToggleAutoRenewResponse, error) {
	out := new(MsgToggleAutoRenewResponse)
	err := c.cc.Invoke(ctx, "/aether.locking.v1beta1.Msg/ToggleAutoRenew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/aether.locking.v1beta1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateLockedDelegation defines a method for creating a new locked delegation.
	CreateLockedDelegation(context.Context, *MsgCreateLockedDelegation) (*MsgCreateLockedDelegationResponse, error)
	// RedelegateLockedDelegation defines a method for performing a redelegation
	// of locked delegations
	RedelegateLockedDelegations(context.Context, *MsgRedelegateLockedDelegations) (*MsgRedelegateLockedDelegationsResponse, error)
	// ToggleAutoRenew toogles the auto renew flag in a locked delegation entry
	ToggleAutoRenew(context.Context, *MsgToggleAutoRenew) (*MsgToggleAutoRenewResponse, error)
	// UpdateParams defines an operation for updating the x/locking module parameters
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateLockedDelegation(ctx context.Context, req *MsgCreateLockedDelegation) (*MsgCreateLockedDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLockedDelegation not implemented")
}
func (*UnimplementedMsgServer) RedelegateLockedDelegations(ctx context.Context, req *MsgRedelegateLockedDelegations) (*MsgRedelegateLockedDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedelegateLockedDelegations not implemented")
}
func (*UnimplementedMsgServer) ToggleAutoRenew(ctx context.Context, req *MsgToggleAutoRenew) (*MsgToggleAutoRenewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleAutoRenew not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateLockedDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateLockedDelegation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateLockedDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.locking.v1beta1.Msg/CreateLockedDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateLockedDelegation(ctx, req.(*MsgCreateLockedDelegation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RedelegateLockedDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRedelegateLockedDelegations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RedelegateLockedDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.locking.v1beta1.Msg/RedelegateLockedDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RedelegateLockedDelegations(ctx, req.(*MsgRedelegateLockedDelegations))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ToggleAutoRenew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgToggleAutoRenew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ToggleAutoRenew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.locking.v1beta1.Msg/ToggleAutoRenew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ToggleAutoRenew(ctx, req.(*MsgToggleAutoRenew))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.locking.v1beta1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aether.locking.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLockedDelegation",
			Handler:    _Msg_CreateLockedDelegation_Handler,
		},
		{
			MethodName: "RedelegateLockedDelegations",
			Handler:    _Msg_RedelegateLockedDelegations_Handler,
		},
		{
			MethodName: "ToggleAutoRenew",
			Handler:    _Msg_ToggleAutoRenew_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aether/locking/v1beta1/tx.proto",
}

func (m *MsgCreateLockedDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLockedDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLockedDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoRenew {
		i--
		if m.AutoRenew {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.LockDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.LockDuration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateLockedDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLockedDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLockedDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRedelegateLockedDelegations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedelegateLockedDelegations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedelegateLockedDelegations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA4 := make([]byte, len(m.Ids)*10)
		var j3 int
		for _, num := range m.Ids {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTx(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ValidatorDstAddress) > 0 {
		i -= len(m.ValidatorDstAddress)
		copy(dAtA[i:], m.ValidatorDstAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorDstAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorSrcAddress) > 0 {
		i -= len(m.ValidatorSrcAddress)
		copy(dAtA[i:], m.ValidatorSrcAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorSrcAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRedelegateLockedDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedelegateLockedDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedelegateLockedDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintTx(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgToggleAutoRenew) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleAutoRenew) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleAutoRenew) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgToggleAutoRenewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleAutoRenewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleAutoRenewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateLockedDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.LockDuration)
	n += 1 + l + sovTx(uint64(l))
	if m.AutoRenew {
		n += 2
	}
	return n
}

func (m *MsgCreateLockedDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRedelegateLockedDelegations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorSrcAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorDstAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgRedelegateLockedDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgToggleAutoRenew) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgToggleAutoRenewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateLockedDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLockedDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLockedDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.LockDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoRenew", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoRenew = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateLockedDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLockedDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLockedDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedelegateLockedDelegations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedelegateLockedDelegations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedelegateLockedDelegations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSrcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSrcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorDstAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorDstAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedelegateLockedDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedelegateLockedDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedelegateLockedDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleAutoRenew) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleAutoRenew: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleAutoRenew: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleAutoRenewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleAutoRenewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleAutoRenewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
