// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aether/locking/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_054ebd2246d2b6c0, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method
type QueryParamsResponse struct {
	// params defines the parameters of the module
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_054ebd2246d2b6c0, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryLockedDelegationRequest is request type for the Query/Delegation RPC method
type QueryLockedDelegationRequest struct {
	// delegator_addr defines the delegator address to query for
	DelegatorAddr string `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	// validator_addr defines the validator address to query for
	ValidatorAddr string `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLockedDelegationRequest) Reset()         { *m = QueryLockedDelegationRequest{} }
func (m *QueryLockedDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockedDelegationRequest) ProtoMessage()    {}
func (*QueryLockedDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_054ebd2246d2b6c0, []int{2}
}
func (m *QueryLockedDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedDelegationRequest.Merge(m, src)
}
func (m *QueryLockedDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedDelegationRequest proto.InternalMessageInfo

// QueryLockedDelegationResponse is response type for the Query/Delegation RPC method
type QueryLockedDelegationResponse struct {
	// locked_delegation_responses defines the locked delegation info
	LockedDelegations []LockedDelegationWithTotalShares `protobuf:"bytes,1,rep,name=locked_delegations,json=lockedDelegations,proto3" json:"locked_delegations"`
	// total_locked is the total shares locked for the delegation
	Shares github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=shares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"shares"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLockedDelegationResponse) Reset()         { *m = QueryLockedDelegationResponse{} }
func (m *QueryLockedDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockedDelegationResponse) ProtoMessage()    {}
func (*QueryLockedDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_054ebd2246d2b6c0, []int{3}
}
func (m *QueryLockedDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedDelegationResponse.Merge(m, src)
}
func (m *QueryLockedDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedDelegationResponse proto.InternalMessageInfo

func (m *QueryLockedDelegationResponse) GetLockedDelegations() []LockedDelegationWithTotalShares {
	if m != nil {
		return m.LockedDelegations
	}
	return nil
}

func (m *QueryLockedDelegationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorLockedDelegationsRequest is request type for the Query/DelegatorDelegations RPC method.
type QueryDelegatorLockedDelegationsRequest struct {
	// delegator_addr defines the delegator address to query for.
	DelegatorAddr string `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorLockedDelegationsRequest) Reset() {
	*m = QueryDelegatorLockedDelegationsRequest{}
}
func (m *QueryDelegatorLockedDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorLockedDelegationsRequest) ProtoMessage()    {}
func (*QueryDelegatorLockedDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_054ebd2246d2b6c0, []int{4}
}
func (m *QueryDelegatorLockedDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorLockedDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorLockedDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorLockedDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorLockedDelegationsRequest.Merge(m, src)
}
func (m *QueryDelegatorLockedDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorLockedDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorLockedDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorLockedDelegationsRequest proto.InternalMessageInfo

// QueryDelegatorLockedDelegationsResponse is response type for the
// Query/DelegatorDelegations RPC method.
type QueryDelegatorLockedDelegationsResponse struct {
	// locked_delegation_responses defines the locked delegation info
	LockedDelegations []LockedDelegationWithTotalShares `protobuf:"bytes,1,rep,name=locked_delegations,json=lockedDelegations,proto3" json:"locked_delegations"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorLockedDelegationsResponse) Reset() {
	*m = QueryDelegatorLockedDelegationsResponse{}
}
func (m *QueryDelegatorLockedDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorLockedDelegationsResponse) ProtoMessage()    {}
func (*QueryDelegatorLockedDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_054ebd2246d2b6c0, []int{5}
}
func (m *QueryDelegatorLockedDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorLockedDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorLockedDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorLockedDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorLockedDelegationsResponse.Merge(m, src)
}
func (m *QueryDelegatorLockedDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorLockedDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorLockedDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorLockedDelegationsResponse proto.InternalMessageInfo

func (m *QueryDelegatorLockedDelegationsResponse) GetLockedDelegations() []LockedDelegationWithTotalShares {
	if m != nil {
		return m.LockedDelegations
	}
	return nil
}

func (m *QueryDelegatorLockedDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryLockedDelegationRewardsRequest is the request type for the
// Query/LockedDelegationRewards RPC method
type QueryLockedDelegationRewardsRequest struct {
	// delegator_address defines the delegator address to query for.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// validator_address defines the validator address to query for.
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QueryLockedDelegationRewardsRequest) Reset()         { *m = QueryLockedDelegationRewardsRequest{} }
func (m *QueryLockedDelegationRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockedDelegationRewardsRequest) ProtoMessage()    {}
func (*QueryLockedDelegationRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_054ebd2246d2b6c0, []int{6}
}
func (m *QueryLockedDelegationRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedDelegationRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedDelegationRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedDelegationRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedDelegationRewardsRequest.Merge(m, src)
}
func (m *QueryLockedDelegationRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedDelegationRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedDelegationRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedDelegationRewardsRequest proto.InternalMessageInfo

// QueryLockedDelegationRewardsResponse is the response type for the
// Query/LockedDelegationRewards RPC method
type QueryLockedDelegationRewardsResponse struct {
	// distribution_reward is the reward from the distribution module
	DistributionReward github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=distribution_reward,json=distributionReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"distribution_reward"`
	// locking_reward is the reward from the locking module
	LockingReward github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=locking_reward,json=lockingReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"locking_reward"`
	// total is the sum between the distribution_reward and the locking_reward
	Total github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,3,rep,name=total,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"total"`
}

func (m *QueryLockedDelegationRewardsResponse) Reset()         { *m = QueryLockedDelegationRewardsResponse{} }
func (m *QueryLockedDelegationRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockedDelegationRewardsResponse) ProtoMessage()    {}
func (*QueryLockedDelegationRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_054ebd2246d2b6c0, []int{7}
}
func (m *QueryLockedDelegationRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedDelegationRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedDelegationRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedDelegationRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedDelegationRewardsResponse.Merge(m, src)
}
func (m *QueryLockedDelegationRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedDelegationRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedDelegationRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedDelegationRewardsResponse proto.InternalMessageInfo

func (m *QueryLockedDelegationRewardsResponse) GetDistributionReward() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.DistributionReward
	}
	return nil
}

func (m *QueryLockedDelegationRewardsResponse) GetLockingReward() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.LockingReward
	}
	return nil
}

func (m *QueryLockedDelegationRewardsResponse) GetTotal() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Total
	}
	return nil
}

// QueryLockedDelegationTotalRewardsRequest is the request type for the
// Query/LockedDelegationTotalRewards RPC method
type QueryLockedDelegationTotalRewardsRequest struct {
	// delegator_address defines the delegator address to query for
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *QueryLockedDelegationTotalRewardsRequest) Reset() {
	*m = QueryLockedDelegationTotalRewardsRequest{}
}
func (m *QueryLockedDelegationTotalRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockedDelegationTotalRewardsRequest) ProtoMessage()    {}
func (*QueryLockedDelegationTotalRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_054ebd2246d2b6c0, []int{8}
}
func (m *QueryLockedDelegationTotalRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedDelegationTotalRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedDelegationTotalRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedDelegationTotalRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedDelegationTotalRewardsRequest.Merge(m, src)
}
func (m *QueryLockedDelegationTotalRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedDelegationTotalRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedDelegationTotalRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedDelegationTotalRewardsRequest proto.InternalMessageInfo

// QueryLockedDelegationTotalRewardsResponse is the response type for the
// Query/LockedDelegationTotalRewards RPC method
type QueryLockedDelegationTotalRewardsResponse struct {
	// rewards defines all the rewards accrued by a delegator.
	Rewards []LockedDelegationDelegatorReward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards"`
	// total defines the sum of all the rewards.
	Total github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=total,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"total"`
}

func (m *QueryLockedDelegationTotalRewardsResponse) Reset() {
	*m = QueryLockedDelegationTotalRewardsResponse{}
}
func (m *QueryLockedDelegationTotalRewardsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLockedDelegationTotalRewardsResponse) ProtoMessage() {}
func (*QueryLockedDelegationTotalRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_054ebd2246d2b6c0, []int{9}
}
func (m *QueryLockedDelegationTotalRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedDelegationTotalRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedDelegationTotalRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedDelegationTotalRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedDelegationTotalRewardsResponse.Merge(m, src)
}
func (m *QueryLockedDelegationTotalRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedDelegationTotalRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedDelegationTotalRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedDelegationTotalRewardsResponse proto.InternalMessageInfo

func (m *QueryLockedDelegationTotalRewardsResponse) GetRewards() []LockedDelegationDelegatorReward {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *QueryLockedDelegationTotalRewardsResponse) GetTotal() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Total
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "aether.locking.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "aether.locking.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryLockedDelegationRequest)(nil), "aether.locking.v1beta1.QueryLockedDelegationRequest")
	proto.RegisterType((*QueryLockedDelegationResponse)(nil), "aether.locking.v1beta1.QueryLockedDelegationResponse")
	proto.RegisterType((*QueryDelegatorLockedDelegationsRequest)(nil), "aether.locking.v1beta1.QueryDelegatorLockedDelegationsRequest")
	proto.RegisterType((*QueryDelegatorLockedDelegationsResponse)(nil), "aether.locking.v1beta1.QueryDelegatorLockedDelegationsResponse")
	proto.RegisterType((*QueryLockedDelegationRewardsRequest)(nil), "aether.locking.v1beta1.QueryLockedDelegationRewardsRequest")
	proto.RegisterType((*QueryLockedDelegationRewardsResponse)(nil), "aether.locking.v1beta1.QueryLockedDelegationRewardsResponse")
	proto.RegisterType((*QueryLockedDelegationTotalRewardsRequest)(nil), "aether.locking.v1beta1.QueryLockedDelegationTotalRewardsRequest")
	proto.RegisterType((*QueryLockedDelegationTotalRewardsResponse)(nil), "aether.locking.v1beta1.QueryLockedDelegationTotalRewardsResponse")
}

func init() {
	proto.RegisterFile("aether/locking/v1beta1/query.proto", fileDescriptor_054ebd2246d2b6c0)
}

var fileDescriptor_054ebd2246d2b6c0 = []byte{
	// 965 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4d, 0x6c, 0x1b, 0x45,
	0x14, 0xf6, 0xd8, 0xd4, 0xb4, 0x53, 0xb5, 0xaa, 0xa7, 0x11, 0x98, 0xc5, 0xac, 0xab, 0x6d, 0xe5,
	0x86, 0x54, 0xd9, 0x55, 0x03, 0x08, 0x44, 0x4d, 0x7f, 0x4c, 0x68, 0xa9, 0xc4, 0x01, 0x9c, 0x48,
	0x15, 0x11, 0x92, 0xb5, 0xf6, 0x8e, 0xd6, 0xab, 0xac, 0x77, 0x9c, 0x9d, 0x75, 0x50, 0x14, 0xf9,
	0xc2, 0x85, 0x70, 0x43, 0xe2, 0x8c, 0x94, 0x23, 0xe2, 0x04, 0x52, 0x6e, 0x88, 0x33, 0x39, 0x46,
	0xe1, 0x82, 0x38, 0x04, 0x94, 0x00, 0x41, 0xe2, 0x82, 0xb8, 0x70, 0x45, 0x3b, 0x33, 0xbb, 0xde,
	0xb5, 0xbd, 0x76, 0x9c, 0x1f, 0x7a, 0xb1, 0xd7, 0x33, 0xef, 0x7d, 0xef, 0xbd, 0xef, 0x7b, 0xf3,
	0x76, 0x0c, 0x15, 0x1d, 0x7b, 0x4d, 0xec, 0x6a, 0x36, 0x69, 0x2c, 0x5b, 0x8e, 0xa9, 0xad, 0xde,
	0xae, 0x63, 0x4f, 0xbf, 0xad, 0xad, 0x74, 0xb0, 0xbb, 0xa6, 0xb6, 0x5d, 0xe2, 0x11, 0xf4, 0x1c,
	0xb7, 0x51, 0x85, 0x8d, 0x2a, 0x6c, 0xa4, 0x82, 0x49, 0x88, 0x69, 0x63, 0x4d, 0x6f, 0x5b, 0x9a,
	0xee, 0x38, 0xc4, 0xd3, 0x3d, 0x8b, 0x38, 0x94, 0x7b, 0x49, 0x53, 0x26, 0x31, 0x09, 0x7b, 0xd4,
	0xfc, 0x27, 0xb1, 0x9a, 0xd3, 0x5b, 0x96, 0x43, 0x34, 0xf6, 0x29, 0x96, 0x66, 0x1a, 0x84, 0xb6,
	0x08, 0xd5, 0xea, 0x3a, 0xc5, 0x3c, 0x6e, 0x98, 0x45, 0x5b, 0x37, 0x2d, 0x87, 0xa1, 0x0a, 0xdb,
	0x17, 0xb8, 0x6d, 0x8d, 0xe3, 0xf2, 0x1f, 0x62, 0xeb, 0x45, 0x01, 0x13, 0x20, 0x44, 0x4b, 0x90,
	0xe4, 0x68, 0x8c, 0x00, 0xbd, 0x41, 0xac, 0x00, 0xf7, 0x7a, 0x02, 0x0d, 0x6d, 0xdd, 0xd5, 0x5b,
	0x41, 0x84, 0x1b, 0x09, 0x46, 0x01, 0x2f, 0xcc, 0x4a, 0x99, 0x82, 0xe8, 0x03, 0x3f, 0xf2, 0xfb,
	0xcc, 0xb5, 0x8a, 0x57, 0x3a, 0x98, 0x7a, 0xca, 0x02, 0xbc, 0x1a, 0x5b, 0xa5, 0x6d, 0xe2, 0x50,
	0x8c, 0xca, 0x30, 0xcb, 0x43, 0xe4, 0xc1, 0x35, 0x30, 0x7d, 0x71, 0x4e, 0x56, 0x87, 0x73, 0xad,
	0x72, 0xbf, 0xca, 0x33, 0xdb, 0x7b, 0xc5, 0x54, 0x55, 0xf8, 0x28, 0xff, 0x00, 0x58, 0x60, 0xa8,
	0xef, 0x91, 0xc6, 0x32, 0x36, 0xe6, 0xb1, 0x8d, 0x4d, 0xc6, 0x96, 0x88, 0x8a, 0xee, 0xc1, 0xcb,
	0x06, 0x5f, 0x24, 0x6e, 0x4d, 0x37, 0x0c, 0x97, 0x85, 0xb9, 0x50, 0xc9, 0xef, 0x6e, 0xcd, 0x4e,
	0x09, 0xf6, 0x1e, 0x18, 0x86, 0x8b, 0x29, 0x5d, 0xf0, 0x5c, 0xcb, 0x31, 0xab, 0x97, 0x42, 0x7b,
	0x7f, 0xdd, 0x07, 0x58, 0xd5, 0x6d, 0xcb, 0xe8, 0x01, 0xa4, 0xc7, 0x01, 0x84, 0xf6, 0x0c, 0xe0,
	0x21, 0x84, 0x3d, 0x11, 0xf3, 0x19, 0x56, 0x64, 0x49, 0x15, 0x9e, 0xbe, 0x1a, 0x2a, 0x97, 0xa9,
	0x57, 0xa7, 0x89, 0x45, 0xf6, 0xd5, 0x88, 0xe7, 0x9b, 0xe7, 0x37, 0x36, 0x8b, 0xa9, 0x3f, 0x37,
	0x8b, 0x29, 0xe5, 0xdb, 0x34, 0x7c, 0x29, 0xa1, 0x68, 0x41, 0xea, 0x0a, 0x44, 0x36, 0xdb, 0xab,
	0x19, 0xe1, 0xa6, 0x4f, 0x70, 0x66, 0xfa, 0xe2, 0xdc, 0xeb, 0x49, 0x04, 0xf7, 0xa3, 0x3d, 0xb1,
	0xbc, 0xe6, 0x22, 0xf1, 0x74, 0x7b, 0xa1, 0xa9, 0xbb, 0x98, 0x56, 0x2e, 0xf8, 0xcc, 0x7f, 0x75,
	0xf8, 0xcd, 0x0c, 0xa8, 0xe6, 0xec, 0x3e, 0x5b, 0x8a, 0x16, 0x61, 0x96, 0x32, 0x3b, 0xc1, 0x4f,
	0xd9, 0xb7, 0xfe, 0x79, 0xaf, 0x58, 0x32, 0x2d, 0xaf, 0xd9, 0xa9, 0xab, 0x0d, 0xd2, 0x12, 0xdd,
	0x2a, 0xbe, 0x66, 0xa9, 0xb1, 0xac, 0x79, 0x6b, 0x6d, 0x4c, 0xd5, 0xc7, 0x8e, 0xb7, 0xbb, 0x35,
	0x0b, 0x05, 0x27, 0x8f, 0x1d, 0xaf, 0x2a, 0xb0, 0xd0, 0xa3, 0x21, 0xe4, 0xdd, 0x1c, 0x4b, 0x1e,
	0x67, 0x21, 0xca, 0x9e, 0xf2, 0x1d, 0x80, 0x25, 0xc6, 0xd9, 0x7c, 0xa0, 0x6e, 0x7f, 0xb9, 0xf4,
	0xd4, 0x5a, 0x26, 0xae, 0x78, 0xfa, 0x14, 0x14, 0xff, 0x1d, 0xc0, 0x9b, 0x63, 0xb3, 0x7f, 0x7a,
	0xda, 0x3f, 0x1a, 0x52, 0xf0, 0xb1, 0x54, 0xfa, 0x1e, 0xc0, 0xeb, 0x09, 0x9d, 0xfd, 0xb1, 0xee,
	0x1a, 0xa1, 0x44, 0xef, 0xc0, 0x5c, 0x5c, 0x22, 0x4c, 0xe9, 0x58, 0x95, 0xae, 0xc4, 0x54, 0xc2,
	0x94, 0xfa, 0x30, 0xf1, 0xb3, 0xed, 0xc3, 0x8c, 0x3b, 0xde, 0x57, 0x62, 0xc7, 0x1b, 0x53, 0x1a,
	0xd1, 0xe9, 0xcb, 0x0c, 0xbc, 0x31, 0x3a, 0x7f, 0x21, 0xd2, 0xa7, 0x00, 0x5e, 0x35, 0x2c, 0xea,
	0xb9, 0x56, 0xbd, 0xe3, 0xef, 0xd7, 0x5c, 0x66, 0x20, 0x64, 0x2a, 0xc4, 0xb8, 0x0b, 0x58, 0x9b,
	0xc7, 0x8d, 0xb7, 0x89, 0xe5, 0x54, 0xde, 0xf0, 0xb5, 0xf8, 0xfa, 0x97, 0xe2, 0xad, 0x23, 0x9c,
	0x2c, 0xe1, 0x43, 0xb9, 0x74, 0x28, 0x1a, 0x92, 0xa7, 0x84, 0xba, 0xf0, 0xb2, 0x68, 0x86, 0x20,
	0x87, 0xf4, 0x99, 0xe6, 0x70, 0x49, 0x44, 0x13, 0xe1, 0x6d, 0x78, 0xce, 0xf3, 0xfb, 0x2c, 0x9f,
	0x39, 0xd3, 0xa8, 0x3c, 0x88, 0xb2, 0x0e, 0xa7, 0x87, 0xca, 0xc3, 0x5a, 0xfd, 0x4c, 0x7a, 0x2c,
	0xd2, 0x1c, 0xff, 0x02, 0xf8, 0xf2, 0x11, 0xa2, 0x8b, 0x0e, 0xf9, 0x08, 0x3e, 0xcb, 0xf5, 0x98,
	0xf8, 0xec, 0x86, 0x33, 0x82, 0x43, 0x46, 0xcf, 0x6e, 0x00, 0xd9, 0xa3, 0x3d, 0xfd, 0x3f, 0xd0,
	0x3e, 0xf7, 0xc3, 0x79, 0x78, 0x8e, 0x55, 0x8e, 0x3e, 0x03, 0x30, 0xcb, 0x5f, 0xe4, 0x68, 0x26,
	0xa9, 0x9e, 0xc1, 0xbb, 0x83, 0x74, 0xeb, 0x48, 0xb6, 0x9c, 0x39, 0xa5, 0xf4, 0xc9, 0x8f, 0xbf,
	0x7d, 0x91, 0xbe, 0x86, 0x64, 0x6d, 0xe4, 0x95, 0x06, 0xfd, 0x01, 0x60, 0x6e, 0x60, 0x8c, 0xa2,
	0x57, 0x47, 0x86, 0x4a, 0xb8, 0x66, 0x48, 0xaf, 0x4d, 0xe8, 0x25, 0x52, 0x35, 0x36, 0x7c, 0x9a,
	0x58, 0xbe, 0x1f, 0xa2, 0x27, 0x49, 0xf9, 0x86, 0x03, 0x87, 0x6a, 0xeb, 0xf1, 0x79, 0xd5, 0xd5,
	0x06, 0x47, 0xbd, 0xb6, 0x1e, 0x6f, 0xdb, 0x2e, 0x3a, 0x04, 0x50, 0x4a, 0x7e, 0x71, 0xa0, 0xbb,
	0x23, 0x73, 0x1f, 0xfb, 0xbe, 0x94, 0xee, 0x1d, 0xdb, 0x5f, 0xb0, 0xf0, 0x6e, 0x8f, 0x85, 0xb7,
	0xd0, 0x1d, 0x6d, 0xc4, 0x1d, 0x73, 0x5c, 0xa5, 0x7f, 0x03, 0xf8, 0x7c, 0xc2, 0xe8, 0x45, 0x77,
	0x26, 0x94, 0x28, 0x3a, 0x0c, 0xa4, 0xf2, 0xf1, 0x9c, 0x45, 0x81, 0x4b, 0xac, 0xb6, 0x45, 0x54,
	0x4d, 0xaa, 0x2d, 0xac, 0x63, 0xa0, 0x26, 0x4c, 0x69, 0x57, 0x13, 0xa7, 0xb6, 0x5f, 0x7d, 0x7f,
	0x0f, 0xfd, 0x05, 0x60, 0x61, 0xd4, 0x40, 0x41, 0xf7, 0x27, 0x4a, 0x7d, 0xc8, 0x24, 0x94, 0x1e,
	0x9c, 0x00, 0x41, 0x30, 0xf0, 0x90, 0x31, 0x70, 0x1f, 0xdd, 0x3d, 0x19, 0x03, 0x95, 0xf2, 0xf6,
	0xbe, 0x0c, 0x76, 0xf6, 0x65, 0xf0, 0xeb, 0xbe, 0x0c, 0x3e, 0x3f, 0x90, 0x53, 0x3b, 0x07, 0x72,
	0xea, 0xa7, 0x03, 0x39, 0xb5, 0xa4, 0x44, 0x86, 0x13, 0x8f, 0x81, 0x57, 0x5b, 0x61, 0x18, 0x36,
	0x9c, 0xea, 0x59, 0xf6, 0xff, 0xe4, 0x95, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x10, 0x7b, 0x42,
	0x0e, 0xf3, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the params of the locking module
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// LockedDelegation queries locked delegatation info for given validator delegator pair
	LockedDelegations(ctx context.Context, in *QueryLockedDelegationRequest, opts ...grpc.CallOption) (*QueryLockedDelegationResponse, error)
	// DelegatorLockedDelegations queries all locked delegations of a given delegator address
	DelegatorLockedDelegations(ctx context.Context, in *QueryDelegatorLockedDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorLockedDelegationsResponse, error)
	// LockedDelegationRewards queries the total rewards accrued by locked delegations
	LockedDelegationRewards(ctx context.Context, in *QueryLockedDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryLockedDelegationRewardsResponse, error)
	// LockedDelegationTotalRewards queries the total locked delegation rewards accrued by a each
	// validator
	LockedDelegationTotalRewards(ctx context.Context, in *QueryLockedDelegationTotalRewardsRequest, opts ...grpc.CallOption) (*QueryLockedDelegationTotalRewardsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/aether.locking.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LockedDelegations(ctx context.Context, in *QueryLockedDelegationRequest, opts ...grpc.CallOption) (*QueryLockedDelegationResponse, error) {
	out := new(QueryLockedDelegationResponse)
	err := c.cc.Invoke(ctx, "/aether.locking.v1beta1.Query/LockedDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorLockedDelegations(ctx context.Context, in *QueryDelegatorLockedDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorLockedDelegationsResponse, error) {
	out := new(QueryDelegatorLockedDelegationsResponse)
	err := c.cc.Invoke(ctx, "/aether.locking.v1beta1.Query/DelegatorLockedDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LockedDelegationRewards(ctx context.Context, in *QueryLockedDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryLockedDelegationRewardsResponse, error) {
	out := new(QueryLockedDelegationRewardsResponse)
	err := c.cc.Invoke(ctx, "/aether.locking.v1beta1.Query/LockedDelegationRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LockedDelegationTotalRewards(ctx context.Context, in *QueryLockedDelegationTotalRewardsRequest, opts ...grpc.CallOption) (*QueryLockedDelegationTotalRewardsResponse, error) {
	out := new(QueryLockedDelegationTotalRewardsResponse)
	err := c.cc.Invoke(ctx, "/aether.locking.v1beta1.Query/LockedDelegationTotalRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the params of the locking module
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// LockedDelegation queries locked delegatation info for given validator delegator pair
	LockedDelegations(context.Context, *QueryLockedDelegationRequest) (*QueryLockedDelegationResponse, error)
	// DelegatorLockedDelegations queries all locked delegations of a given delegator address
	DelegatorLockedDelegations(context.Context, *QueryDelegatorLockedDelegationsRequest) (*QueryDelegatorLockedDelegationsResponse, error)
	// LockedDelegationRewards queries the total rewards accrued by locked delegations
	LockedDelegationRewards(context.Context, *QueryLockedDelegationRewardsRequest) (*QueryLockedDelegationRewardsResponse, error)
	// LockedDelegationTotalRewards queries the total locked delegation rewards accrued by a each
	// validator
	LockedDelegationTotalRewards(context.Context, *QueryLockedDelegationTotalRewardsRequest) (*QueryLockedDelegationTotalRewardsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) LockedDelegations(ctx context.Context, req *QueryLockedDelegationRequest) (*QueryLockedDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockedDelegations not implemented")
}
func (*UnimplementedQueryServer) DelegatorLockedDelegations(ctx context.Context, req *QueryDelegatorLockedDelegationsRequest) (*QueryDelegatorLockedDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorLockedDelegations not implemented")
}
func (*UnimplementedQueryServer) LockedDelegationRewards(ctx context.Context, req *QueryLockedDelegationRewardsRequest) (*QueryLockedDelegationRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockedDelegationRewards not implemented")
}
func (*UnimplementedQueryServer) LockedDelegationTotalRewards(ctx context.Context, req *QueryLockedDelegationTotalRewardsRequest) (*QueryLockedDelegationTotalRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockedDelegationTotalRewards not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.locking.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LockedDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockedDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LockedDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.locking.v1beta1.Query/LockedDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LockedDelegations(ctx, req.(*QueryLockedDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorLockedDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorLockedDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorLockedDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.locking.v1beta1.Query/DelegatorLockedDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorLockedDelegations(ctx, req.(*QueryDelegatorLockedDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LockedDelegationRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockedDelegationRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LockedDelegationRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.locking.v1beta1.Query/LockedDelegationRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LockedDelegationRewards(ctx, req.(*QueryLockedDelegationRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LockedDelegationTotalRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockedDelegationTotalRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LockedDelegationTotalRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.locking.v1beta1.Query/LockedDelegationTotalRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LockedDelegationTotalRewards(ctx, req.(*QueryLockedDelegationTotalRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aether.locking.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "LockedDelegations",
			Handler:    _Query_LockedDelegations_Handler,
		},
		{
			MethodName: "DelegatorLockedDelegations",
			Handler:    _Query_DelegatorLockedDelegations_Handler,
		},
		{
			MethodName: "LockedDelegationRewards",
			Handler:    _Query_LockedDelegationRewards_Handler,
		},
		{
			MethodName: "LockedDelegationTotalRewards",
			Handler:    _Query_LockedDelegationTotalRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aether/locking/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLockedDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockedDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.LockedDelegations) > 0 {
		for iNdEx := len(m.LockedDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockedDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorLockedDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorLockedDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorLockedDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorLockedDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorLockedDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorLockedDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LockedDelegations) > 0 {
		for iNdEx := len(m.LockedDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockedDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockedDelegationRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedDelegationRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedDelegationRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockedDelegationRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedDelegationRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedDelegationRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Total) > 0 {
		for iNdEx := len(m.Total) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Total[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LockingReward) > 0 {
		for iNdEx := len(m.LockingReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockingReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DistributionReward) > 0 {
		for iNdEx := len(m.DistributionReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DistributionReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockedDelegationTotalRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedDelegationTotalRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedDelegationTotalRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockedDelegationTotalRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedDelegationTotalRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedDelegationTotalRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Total) > 0 {
		for iNdEx := len(m.Total) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Total[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLockedDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockedDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockedDelegations) > 0 {
		for _, e := range m.LockedDelegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.Shares.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorLockedDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorLockedDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockedDelegations) > 0 {
		for _, e := range m.LockedDelegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockedDelegationRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockedDelegationRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DistributionReward) > 0 {
		for _, e := range m.DistributionReward {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.LockingReward) > 0 {
		for _, e := range m.LockingReward {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Total) > 0 {
		for _, e := range m.Total {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLockedDelegationTotalRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockedDelegationTotalRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Total) > 0 {
		for _, e := range m.Total {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockedDelegations = append(m.LockedDelegations, LockedDelegationWithTotalShares{})
			if err := m.LockedDelegations[len(m.LockedDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorLockedDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorLockedDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorLockedDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorLockedDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorLockedDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorLockedDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockedDelegations = append(m.LockedDelegations, LockedDelegationWithTotalShares{})
			if err := m.LockedDelegations[len(m.LockedDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedDelegationRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedDelegationRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedDelegationRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedDelegationRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedDelegationRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedDelegationRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionReward = append(m.DistributionReward, types.DecCoin{})
			if err := m.DistributionReward[len(m.DistributionReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockingReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockingReward = append(m.LockingReward, types.DecCoin{})
			if err := m.LockingReward[len(m.LockingReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = append(m.Total, types.DecCoin{})
			if err := m.Total[len(m.Total)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedDelegationTotalRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedDelegationTotalRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedDelegationTotalRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedDelegationTotalRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedDelegationTotalRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedDelegationTotalRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, LockedDelegationDelegatorReward{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = append(m.Total, types.DecCoin{})
			if err := m.Total[len(m.Total)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
