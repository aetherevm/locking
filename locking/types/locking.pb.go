// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aether/locking/v1beta1/locking.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LockedDelegation defines the locking locked delegations
type LockedDelegation struct {
	// delegator_address is the bech32-encoded address of the delegator
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// validator_address is the bech32-encoded address of the validator
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// entries are all the lockings made on top of the pair
	Entries []LockedDelegationEntry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries"`
}

func (m *LockedDelegation) Reset()      { *m = LockedDelegation{} }
func (*LockedDelegation) ProtoMessage() {}
func (*LockedDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_505f454303ab7e28, []int{0}
}
func (m *LockedDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedDelegation.Merge(m, src)
}
func (m *LockedDelegation) XXX_Size() int {
	return m.Size()
}
func (m *LockedDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_LockedDelegation proto.InternalMessageInfo

type LockedDelegationEntry struct {
	// shares define the locked shares
	Shares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=shares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"shares"`
	// The rate used on calculation
	Rate Rate `protobuf:"bytes,2,opt,name=rate,proto3" json:"rate"`
	// unlock_on defines when the delegation will be unlocked
	UnlockOn time.Time `protobuf:"bytes,3,opt,name=unlock_on,json=unlockOn,proto3,stdtime" json:"unlock_on"`
	// auto_renew defines if the delegator wants to auto renew the locking after expiration
	AutoRenew bool `protobuf:"varint,4,opt,name=auto_renew,json=autoRenew,proto3" json:"auto_renew,omitempty" yaml:"undelegate"`
	// Incrementing id that uniquely identifies this entry
	Id uint64 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *LockedDelegationEntry) Reset()      { *m = LockedDelegationEntry{} }
func (*LockedDelegationEntry) ProtoMessage() {}
func (*LockedDelegationEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_505f454303ab7e28, []int{1}
}
func (m *LockedDelegationEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedDelegationEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedDelegationEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedDelegationEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedDelegationEntry.Merge(m, src)
}
func (m *LockedDelegationEntry) XXX_Size() int {
	return m.Size()
}
func (m *LockedDelegationEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedDelegationEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LockedDelegationEntry proto.InternalMessageInfo

func (m *LockedDelegationEntry) GetRate() Rate {
	if m != nil {
		return m.Rate
	}
	return Rate{}
}

func (m *LockedDelegationEntry) GetUnlockOn() time.Time {
	if m != nil {
		return m.UnlockOn
	}
	return time.Time{}
}

func (m *LockedDelegationEntry) GetAutoRenew() bool {
	if m != nil {
		return m.AutoRenew
	}
	return false
}

func (m *LockedDelegationEntry) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Rate are the rate of rewards for the locked delegations
type Rate struct {
	// Duration is the lock duration
	Duration time.Duration `protobuf:"bytes,1,opt,name=duration,proto3,stdduration" json:"duration"`
	// The rate used on calculation
	Rate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate"`
}

func (m *Rate) Reset()         { *m = Rate{} }
func (m *Rate) String() string { return proto.CompactTextString(m) }
func (*Rate) ProtoMessage()    {}
func (*Rate) Descriptor() ([]byte, []int) {
	return fileDescriptor_505f454303ab7e28, []int{2}
}
func (m *Rate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rate.Merge(m, src)
}
func (m *Rate) XXX_Size() int {
	return m.Size()
}
func (m *Rate) XXX_DiscardUnknown() {
	xxx_messageInfo_Rate.DiscardUnknown(m)
}

var xxx_messageInfo_Rate proto.InternalMessageInfo

func (m *Rate) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

// LockedDelegationPair define a del and val pair
type LockedDelegationPair struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *LockedDelegationPair) Reset()      { *m = LockedDelegationPair{} }
func (*LockedDelegationPair) ProtoMessage() {}
func (*LockedDelegationPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_505f454303ab7e28, []int{3}
}
func (m *LockedDelegationPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedDelegationPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedDelegationPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedDelegationPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedDelegationPair.Merge(m, src)
}
func (m *LockedDelegationPair) XXX_Size() int {
	return m.Size()
}
func (m *LockedDelegationPair) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedDelegationPair.DiscardUnknown(m)
}

var xxx_messageInfo_LockedDelegationPair proto.InternalMessageInfo

// DVPairs defines an array of LockedDelegationPairs objects
type LockedDelegationPairs struct {
	Pairs []LockedDelegationPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs"`
}

func (m *LockedDelegationPairs) Reset()         { *m = LockedDelegationPairs{} }
func (m *LockedDelegationPairs) String() string { return proto.CompactTextString(m) }
func (*LockedDelegationPairs) ProtoMessage()    {}
func (*LockedDelegationPairs) Descriptor() ([]byte, []int) {
	return fileDescriptor_505f454303ab7e28, []int{4}
}
func (m *LockedDelegationPairs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedDelegationPairs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedDelegationPairs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedDelegationPairs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedDelegationPairs.Merge(m, src)
}
func (m *LockedDelegationPairs) XXX_Size() int {
	return m.Size()
}
func (m *LockedDelegationPairs) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedDelegationPairs.DiscardUnknown(m)
}

var xxx_messageInfo_LockedDelegationPairs proto.InternalMessageInfo

func (m *LockedDelegationPairs) GetPairs() []LockedDelegationPair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

// LockedDelegationDelegatorReward represents the properties
// of a delegator's locked delegation reward
type LockedDelegationDelegatorReward struct {
	// validator_address is the validator address
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// distribution_reward is the reward from the distribution module
	DistributionReward github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=distribution_reward,json=distributionReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"distribution_reward"`
	// locking_reward is the reward from the locking module
	LockingReward github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,3,rep,name=locking_reward,json=lockingReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"locking_reward"`
	// total is the sum between the distribution_reward and the locking_reward
	Total github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,4,rep,name=total,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"total"`
}

func (m *LockedDelegationDelegatorReward) Reset()         { *m = LockedDelegationDelegatorReward{} }
func (m *LockedDelegationDelegatorReward) String() string { return proto.CompactTextString(m) }
func (*LockedDelegationDelegatorReward) ProtoMessage()    {}
func (*LockedDelegationDelegatorReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_505f454303ab7e28, []int{5}
}
func (m *LockedDelegationDelegatorReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedDelegationDelegatorReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedDelegationDelegatorReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedDelegationDelegatorReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedDelegationDelegatorReward.Merge(m, src)
}
func (m *LockedDelegationDelegatorReward) XXX_Size() int {
	return m.Size()
}
func (m *LockedDelegationDelegatorReward) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedDelegationDelegatorReward.DiscardUnknown(m)
}

var xxx_messageInfo_LockedDelegationDelegatorReward proto.InternalMessageInfo

// LockedDelegationWithTotalShares defines an locked delegation carrying the total shares
type LockedDelegationWithTotalShares struct {
	LockedDelegation LockedDelegation `protobuf:"bytes,1,opt,name=locked_delegation,json=lockedDelegation,proto3" json:"locked_delegation"`
	// total_locked is the total shares locked for the delegation
	TotalLocked github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=total_locked,json=totalLocked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total_locked"`
}

func (m *LockedDelegationWithTotalShares) Reset()         { *m = LockedDelegationWithTotalShares{} }
func (m *LockedDelegationWithTotalShares) String() string { return proto.CompactTextString(m) }
func (*LockedDelegationWithTotalShares) ProtoMessage()    {}
func (*LockedDelegationWithTotalShares) Descriptor() ([]byte, []int) {
	return fileDescriptor_505f454303ab7e28, []int{6}
}
func (m *LockedDelegationWithTotalShares) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedDelegationWithTotalShares) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedDelegationWithTotalShares.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedDelegationWithTotalShares) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedDelegationWithTotalShares.Merge(m, src)
}
func (m *LockedDelegationWithTotalShares) XXX_Size() int {
	return m.Size()
}
func (m *LockedDelegationWithTotalShares) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedDelegationWithTotalShares.DiscardUnknown(m)
}

var xxx_messageInfo_LockedDelegationWithTotalShares proto.InternalMessageInfo

func (m *LockedDelegationWithTotalShares) GetLockedDelegation() LockedDelegation {
	if m != nil {
		return m.LockedDelegation
	}
	return LockedDelegation{}
}

func init() {
	proto.RegisterType((*LockedDelegation)(nil), "aether.locking.v1beta1.LockedDelegation")
	proto.RegisterType((*LockedDelegationEntry)(nil), "aether.locking.v1beta1.LockedDelegationEntry")
	proto.RegisterType((*Rate)(nil), "aether.locking.v1beta1.Rate")
	proto.RegisterType((*LockedDelegationPair)(nil), "aether.locking.v1beta1.LockedDelegationPair")
	proto.RegisterType((*LockedDelegationPairs)(nil), "aether.locking.v1beta1.LockedDelegationPairs")
	proto.RegisterType((*LockedDelegationDelegatorReward)(nil), "aether.locking.v1beta1.LockedDelegationDelegatorReward")
	proto.RegisterType((*LockedDelegationWithTotalShares)(nil), "aether.locking.v1beta1.LockedDelegationWithTotalShares")
}

func init() {
	proto.RegisterFile("aether/locking/v1beta1/locking.proto", fileDescriptor_505f454303ab7e28)
}

var fileDescriptor_505f454303ab7e28 = []byte{
	// 773 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xcf, 0x4f, 0xdb, 0x48,
	0x18, 0xcd, 0x24, 0x81, 0x4d, 0x26, 0x2c, 0x22, 0x5e, 0x58, 0x19, 0x84, 0xe2, 0xc8, 0x5a, 0xad,
	0xa2, 0xdd, 0x8d, 0x2d, 0xd8, 0x3d, 0xac, 0xb2, 0x48, 0x2b, 0xd2, 0x70, 0x6b, 0x55, 0x64, 0x90,
	0x2a, 0xf5, 0xe2, 0x4e, 0xec, 0xc1, 0x19, 0xe1, 0x78, 0x22, 0x7b, 0x02, 0xe2, 0xd0, 0x4b, 0x2f,
	0xed, 0x91, 0x23, 0xb7, 0x72, 0xac, 0x7a, 0xaa, 0x2a, 0xae, 0xbd, 0x73, 0x44, 0x9c, 0xaa, 0x1e,
	0xa0, 0x82, 0x4a, 0x6d, 0xaf, 0xfd, 0x0b, 0xaa, 0xf9, 0xe1, 0x28, 0x0d, 0x54, 0xa5, 0x6a, 0x91,
	0x7a, 0x49, 0x3c, 0xf6, 0xfb, 0xde, 0xf7, 0xde, 0xe7, 0x37, 0x63, 0xf8, 0x1b, 0xc2, 0xac, 0x83,
	0x63, 0x3b, 0xa4, 0xde, 0x26, 0x89, 0x02, 0x7b, 0x6b, 0xa1, 0x8d, 0x19, 0x5a, 0x48, 0xd7, 0x56,
	0x2f, 0xa6, 0x8c, 0x6a, 0xbf, 0x4a, 0x94, 0x95, 0xde, 0x55, 0xa8, 0xb9, 0xe9, 0x80, 0x06, 0x54,
	0x40, 0x6c, 0x7e, 0x25, 0xd1, 0x73, 0x46, 0x40, 0x69, 0x10, 0x62, 0x5b, 0xac, 0xda, 0xfd, 0x0d,
	0x9b, 0x91, 0x2e, 0x4e, 0x18, 0xea, 0xf6, 0x14, 0xa0, 0x32, 0x0a, 0xf0, 0xfb, 0x31, 0x62, 0x84,
	0x46, 0xea, 0x79, 0x19, 0x75, 0x49, 0x44, 0x6d, 0xf1, 0xab, 0x6e, 0xcd, 0x7a, 0x34, 0xe9, 0xd2,
	0xc4, 0x95, 0xcd, 0xe4, 0x22, 0x65, 0x93, 0x2b, 0xbb, 0x8d, 0x12, 0x3c, 0xd0, 0xef, 0x51, 0xa2,
	0xd8, 0xcc, 0x07, 0x59, 0x38, 0x75, 0x93, 0x7a, 0x9b, 0xd8, 0x6f, 0xe1, 0x10, 0x07, 0xa2, 0x91,
	0xb6, 0x02, 0xcb, 0xbe, 0x5c, 0xd1, 0xd8, 0x45, 0xbe, 0x1f, 0xe3, 0x24, 0xd1, 0x41, 0x15, 0xd4,
	0x8a, 0x4d, 0xfd, 0xf8, 0xa0, 0x3e, 0xad, 0x3a, 0x2c, 0xcb, 0x27, 0x6b, 0x2c, 0x26, 0x51, 0xe0,
	0x4c, 0x0d, 0x4a, 0xd4, 0x7d, 0x4e, 0xb3, 0x85, 0x42, 0xe2, 0x7f, 0x42, 0x93, 0xfd, 0x12, 0xcd,
	0xa0, 0x24, 0xa5, 0x71, 0xe0, 0x4f, 0x38, 0x62, 0x31, 0xc1, 0x89, 0x9e, 0xab, 0xe6, 0x6a, 0xa5,
	0xc5, 0xba, 0x75, 0xf9, 0xc4, 0xad, 0x51, 0x23, 0x2b, 0x11, 0x8b, 0x77, 0x9a, 0xc5, 0xc3, 0x13,
	0x23, 0xf3, 0xe4, 0xed, 0xb3, 0x3f, 0x80, 0x93, 0x12, 0x35, 0x26, 0x1e, 0xed, 0x1b, 0x99, 0xbd,
	0x7d, 0x23, 0xf3, 0x6e, 0xdf, 0xc8, 0x98, 0x2f, 0xb2, 0x70, 0xe6, 0xd2, 0x5a, 0x6d, 0x1d, 0x8e,
	0x27, 0x1d, 0x14, 0xe3, 0xd4, 0xfe, 0x12, 0xe7, 0x7a, 0x75, 0x62, 0xfc, 0x1e, 0x10, 0xd6, 0xe9,
	0xb7, 0x2d, 0x8f, 0x76, 0xd5, 0xbc, 0xd5, 0x5f, 0x3d, 0xf1, 0x37, 0x6d, 0xb6, 0xd3, 0xc3, 0x89,
	0xd5, 0xc2, 0xde, 0xf1, 0x41, 0x1d, 0x2a, 0x97, 0x2d, 0xec, 0x39, 0x8a, 0x4b, 0xfb, 0x0f, 0xe6,
	0x63, 0xc4, 0xb0, 0x98, 0x45, 0x69, 0x71, 0xfe, 0x73, 0x76, 0x1c, 0xc4, 0xf0, 0xb0, 0x7a, 0x51,
	0xa4, 0x2d, 0xc3, 0x62, 0x3f, 0xe2, 0x50, 0x97, 0x46, 0x7a, 0x4e, 0x30, 0xcc, 0x59, 0x32, 0x33,
	0x56, 0x9a, 0x19, 0x6b, 0x3d, 0x0d, 0x55, 0xb3, 0xc0, 0xeb, 0x77, 0x4f, 0x0d, 0xe0, 0x14, 0x64,
	0xd9, 0xed, 0x48, 0xfb, 0x07, 0x42, 0xd4, 0x67, 0xd4, 0x8d, 0x71, 0x84, 0xb7, 0xf5, 0x7c, 0x15,
	0xd4, 0x0a, 0xcd, 0x99, 0x0f, 0x27, 0x46, 0x79, 0x07, 0x75, 0xc3, 0x86, 0xd9, 0x8f, 0xd4, 0xab,
	0xc4, 0xa6, 0x53, 0xe4, 0x40, 0x87, 0xe3, 0xb4, 0x49, 0x98, 0x25, 0xbe, 0x3e, 0x56, 0x05, 0xb5,
	0xbc, 0x93, 0x25, 0x7e, 0xa3, 0xa0, 0xe6, 0x07, 0xcc, 0xc7, 0x00, 0xe6, 0xb9, 0x58, 0xed, 0x7f,
	0x58, 0x48, 0xd3, 0x2a, 0x06, 0x56, 0x5a, 0x9c, 0xbd, 0x20, 0xad, 0xa5, 0x00, 0x52, 0xd9, 0x9e,
	0x50, 0x96, 0x16, 0x69, 0xab, 0x43, 0x93, 0xf9, 0xd6, 0x69, 0x0b, 0xa6, 0x46, 0x5e, 0x28, 0x7c,
	0x0e, 0xe0, 0xf4, 0xe8, 0x1b, 0x5e, 0x45, 0x24, 0xfe, 0xb1, 0xa2, 0x3e, 0x12, 0xcb, 0x8d, 0x8b,
	0xa9, 0xe4, 0x9a, 0x13, 0xed, 0x16, 0x1c, 0xeb, 0xf1, 0x0b, 0x1d, 0x88, 0xfd, 0xf0, 0xd7, 0x55,
	0xf7, 0x03, 0xaf, 0x1e, 0x0e, 0x94, 0x64, 0x31, 0xdf, 0xe7, 0xa0, 0x31, 0x0a, 0x6d, 0xa5, 0x0e,
	0x1d, 0xbc, 0x8d, 0x62, 0xff, 0x72, 0x83, 0xe0, 0xab, 0xf7, 0xf2, 0x43, 0x00, 0x7f, 0xf1, 0x49,
	0xc2, 0x62, 0xd2, 0xee, 0xf3, 0x36, 0x6e, 0x2c, 0xe8, 0xf5, 0xac, 0x30, 0x32, 0x6f, 0x29, 0x1a,
	0x7e, 0x5a, 0x0d, 0x5c, 0xb4, 0xb0, 0x77, 0x83, 0x92, 0xa8, 0xf9, 0x2f, 0x17, 0xfe, 0xf4, 0xd4,
	0xf8, 0xf3, 0x6a, 0x69, 0xe0, 0x35, 0x89, 0xf4, 0xa9, 0x0d, 0xb7, 0x54, 0x86, 0xee, 0xc3, 0x49,
	0x35, 0xae, 0x54, 0x43, 0xee, 0x5a, 0x35, 0xfc, 0xac, 0xba, 0xa9, 0xf6, 0x21, 0x1c, 0x63, 0x94,
	0xa1, 0x50, 0xcf, 0x5f, 0x6b, 0x57, 0xd9, 0xa4, 0x51, 0x50, 0xb9, 0x02, 0xe6, 0x1b, 0x70, 0xf1,
	0x5d, 0xdf, 0x21, 0xac, 0xb3, 0xce, 0x71, 0x6b, 0xf2, 0x78, 0xba, 0x07, 0xcb, 0xa1, 0x80, 0xb8,
	0xfe, 0x00, 0xa3, 0xb6, 0x73, 0xed, 0xaa, 0x51, 0x1b, 0x8e, 0xd9, 0x54, 0x38, 0xfa, 0x81, 0x71,
	0xe1, 0x84, 0x10, 0xe6, 0xca, 0x27, 0xdf, 0x65, 0xbb, 0x97, 0x04, 0xa3, 0xd4, 0xd1, 0x5c, 0x3a,
	0x3c, 0xab, 0x80, 0xa3, 0xb3, 0x0a, 0x78, 0x7d, 0x56, 0x01, 0xbb, 0xe7, 0x95, 0xcc, 0xd1, 0x79,
	0x25, 0xf3, 0xf2, 0xbc, 0x92, 0xb9, 0x6b, 0x0e, 0x91, 0x4b, 0x2f, 0x78, 0xab, 0x3b, 0xf8, 0xc2,
	0x0b, 0xf2, 0xf6, 0xb8, 0x38, 0xac, 0xfe, 0xfe, 0x18, 0x00, 0x00, 0xff, 0xff, 0x93, 0x7e, 0x60,
	0x94, 0x00, 0x08, 0x00, 0x00,
}

func (this *LockedDelegationEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LockedDelegationEntry)
	if !ok {
		that2, ok := that.(LockedDelegationEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Shares.Equal(that1.Shares) {
		return false
	}
	if !this.Rate.Equal(&that1.Rate) {
		return false
	}
	if !this.UnlockOn.Equal(that1.UnlockOn) {
		return false
	}
	if this.AutoRenew != that1.AutoRenew {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Rate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Rate)
	if !ok {
		that2, ok := that.(Rate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if !this.Rate.Equal(that1.Rate) {
		return false
	}
	return true
}
func (m *LockedDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintLocking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintLocking(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockedDelegationEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedDelegationEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedDelegationEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintLocking(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x28
	}
	if m.AutoRenew {
		i--
		if m.AutoRenew {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UnlockOn, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnlockOn):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLocking(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Rate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLocking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Rate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	n3, err3 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintLocking(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LockedDelegationPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedDelegationPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedDelegationPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintLocking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintLocking(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockedDelegationPairs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedDelegationPairs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedDelegationPairs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for iNdEx := len(m.Pairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LockedDelegationDelegatorReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedDelegationDelegatorReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedDelegationDelegatorReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Total) > 0 {
		for iNdEx := len(m.Total) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Total[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.LockingReward) > 0 {
		for iNdEx := len(m.LockingReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockingReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DistributionReward) > 0 {
		for iNdEx := len(m.DistributionReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DistributionReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintLocking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockedDelegationWithTotalShares) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedDelegationWithTotalShares) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedDelegationWithTotalShares) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalLocked.Size()
		i -= size
		if _, err := m.TotalLocked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.LockedDelegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLocking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintLocking(dAtA []byte, offset int, v uint64) int {
	offset -= sovLocking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LockedDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovLocking(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovLocking(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovLocking(uint64(l))
		}
	}
	return n
}

func (m *LockedDelegationEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Shares.Size()
	n += 1 + l + sovLocking(uint64(l))
	l = m.Rate.Size()
	n += 1 + l + sovLocking(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnlockOn)
	n += 1 + l + sovLocking(uint64(l))
	if m.AutoRenew {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovLocking(uint64(m.Id))
	}
	return n
}

func (m *Rate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovLocking(uint64(l))
	l = m.Rate.Size()
	n += 1 + l + sovLocking(uint64(l))
	return n
}

func (m *LockedDelegationPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovLocking(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovLocking(uint64(l))
	}
	return n
}

func (m *LockedDelegationPairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovLocking(uint64(l))
		}
	}
	return n
}

func (m *LockedDelegationDelegatorReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovLocking(uint64(l))
	}
	if len(m.DistributionReward) > 0 {
		for _, e := range m.DistributionReward {
			l = e.Size()
			n += 1 + l + sovLocking(uint64(l))
		}
	}
	if len(m.LockingReward) > 0 {
		for _, e := range m.LockingReward {
			l = e.Size()
			n += 1 + l + sovLocking(uint64(l))
		}
	}
	if len(m.Total) > 0 {
		for _, e := range m.Total {
			l = e.Size()
			n += 1 + l + sovLocking(uint64(l))
		}
	}
	return n
}

func (m *LockedDelegationWithTotalShares) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LockedDelegation.Size()
	n += 1 + l + sovLocking(uint64(l))
	l = m.TotalLocked.Size()
	n += 1 + l + sovLocking(uint64(l))
	return n
}

func sovLocking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLocking(x uint64) (n int) {
	return sovLocking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LockedDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, LockedDelegationEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedDelegationEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedDelegationEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedDelegationEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.UnlockOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoRenew", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoRenew = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedDelegationPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedDelegationPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedDelegationPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedDelegationPairs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedDelegationPairs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedDelegationPairs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, LockedDelegationPair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedDelegationDelegatorReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedDelegationDelegatorReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedDelegationDelegatorReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionReward = append(m.DistributionReward, types.DecCoin{})
			if err := m.DistributionReward[len(m.DistributionReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockingReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockingReward = append(m.LockingReward, types.DecCoin{})
			if err := m.LockingReward[len(m.LockingReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = append(m.Total, types.DecCoin{})
			if err := m.Total[len(m.Total)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedDelegationWithTotalShares) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedDelegationWithTotalShares: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedDelegationWithTotalShares: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedDelegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockedDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLocking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLocking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLocking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLocking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLocking = fmt.Errorf("proto: unexpected end of group")
)
