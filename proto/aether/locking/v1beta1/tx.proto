// Copyright Aether Labs
// SPDX-License-Identifier:BSLv1.1(https://github.com/aetherevm/aether/blob/master/LICENSE)
syntax = "proto3";
package aether.locking.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";

import "aether/locking/v1beta1/params.proto";

option go_package = "github.com/aetherevm/locking/types";

// Msg defines the locking Msg service.
service Msg {
    option (cosmos.msg.v1.service) = true;
  
    // CreateLockedDelegation defines a method for creating a new locked delegation.
    rpc CreateLockedDelegation(MsgCreateLockedDelegation) returns (MsgCreateLockedDelegationResponse);

    // RedelegateLockedDelegation defines a method for performing a redelegation
    // of locked delegations
    rpc RedelegateLockedDelegations(MsgRedelegateLockedDelegations) returns (MsgRedelegateLockedDelegationsResponse);

    // ToggleAutoRenew toogles the auto renew flag in a locked delegation entry
    rpc ToggleAutoRenew(MsgToggleAutoRenew) returns (MsgToggleAutoRenewResponse);

    // UpdateParams defines an operation for updating the x/locking module parameters
    rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateLockedDelegation defines a SDK message for creating a locked delegation
message MsgCreateLockedDelegation {
    option (cosmos.msg.v1.signer) = "delegator_address";
    option (amino.name)           = "aether/CreateLockedDelegation";
  
    option (gogoproto.equal)           = false;
    option (gogoproto.goproto_getters) = false;
  
    // delegator_address is the target delegator address
    string                   delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    // validator_address is the target validator address
    string                   validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    // validator_address is the amount that will delegated and locked
    cosmos.base.v1beta1.Coin amount            = 3 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
    // lock_duration is for how long the locking will last
    google.protobuf.Duration lock_duration     = 4 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
    // auto_renew defines if the delegator wants to auto renew the locking after expiration
    bool                     auto_renew        = 5;
}
  
// MsgCreateLockedDelegationResponse defines the Msg/CreateLockedDelegation response type.
message MsgCreateLockedDelegationResponse {}

// MsgRedelegateLockedDelegation defines a SDK message for performing a redelegation
// of locked delegations 
message MsgRedelegateLockedDelegations {
    option (cosmos.msg.v1.signer) = "delegator_address";
    option (amino.name)           = "cosmos-sdk/MsgRedelegateLockedDelegation";
  
    option (gogoproto.equal)           = false;
    option (gogoproto.goproto_getters) = false;
  
    // delegator_address is the delegator address, the signer
    string delegator_address     = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    // validator_src_address is the source validator address
    string validator_src_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    // validator_dst_address is the target validator address
    string validator_dst_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    // ids are all the locked delegation ids that will move between the source and destination validators
    repeated uint64 ids = 4;
}
  
// MsgRedelegateLockedDelegationsResponse defines the Msg/MsgRedelegateLockedDelegation response type.
message MsgRedelegateLockedDelegationsResponse{
google.protobuf.Timestamp completion_time = 1
    [(gogoproto.nullable) = false, (amino.dont_omitempty) = true, (gogoproto.stdtime) = true];
}

// MsgToggleAutoRenew defines a SDK message for performing a auto renew flag flip on a
// locked delegation entry
message MsgToggleAutoRenew {
  option (cosmos.msg.v1.signer) = "delegator_address";
  option (amino.name)           = "cosmos-sdk/MsgToggleAutoRenew";
  
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;
  
  // delegator_address is the delegator address, the signer
  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // validator_address is the validator address
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // id is the id of the entry that will have the flag turned
  uint64 id = 3;
}
  
// MsgToggleAutoRenewResponse defines the Msg/MsgToggleAutoRenew response type.
message MsgToggleAutoRenewResponse{}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
    option (cosmos.msg.v1.signer) = "authority";
  
    // authority is the address that controls the module (defaults to x/gov unless overwritten).
    string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    
    // params defines the x/locking parameters to update.
    // NOTE: All parameters must be supplied.
    Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
};

// MsgUpdateParamsResponse defines the response structure for executing a MsgUpdateParams message.
message MsgUpdateParamsResponse {};