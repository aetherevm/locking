// Copyright Aether Labs
// SPDX-License-Identifier:BSLv1.1(https://github.com/aetherevm/aether/blob/master/LICENSE)
syntax = "proto3";
package aether.locking.v1beta1;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/query/v1/query.proto";
import "cosmos/base/v1beta1/coin.proto";

import "aether/locking/v1beta1/params.proto";
import "aether/locking/v1beta1/locking.proto";

option go_package = "github.com/aetherevm/locking/types";

// Query defines the gRPC querier service
service Query {
  // Params queries the params of the locking module
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/aether/locking/v1beta1/params";
  }
  // LockedDelegation queries locked delegatation info for given validator delegator pair
  rpc LockedDelegations(QueryLockedDelegationRequest) returns (QueryLockedDelegationResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get               = "/aether/locking/v1beta1/validators/{validator_addr}/locked_delegations/"
                                                 "{delegator_addr}";
  }
  // DelegatorLockedDelegations queries all locked delegations of a given delegator address
  rpc DelegatorLockedDelegations(QueryDelegatorLockedDelegationsRequest) returns (QueryDelegatorLockedDelegationsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get               = "/aether/locking/v1beta1/locked_delegations/{delegator_addr}";
  }
  // LockedDelegationRewards queries the total rewards accrued by locked delegations
  rpc LockedDelegationRewards(QueryLockedDelegationRewardsRequest) returns (QueryLockedDelegationRewardsResponse) {
    option (google.api.http).get = "/aether/locking/v1beta1/delegators/{delegator_address}/rewards/"
                                    "{validator_address}";
  }
  // LockedDelegationTotalRewards queries the total locked delegation rewards accrued by a each
  // validator
  rpc LockedDelegationTotalRewards(QueryLockedDelegationTotalRewardsRequest) returns (QueryLockedDelegationTotalRewardsResponse) {
    option (google.api.http).get = "/aether/locking/v1beta1/delegators/{delegator_address}/rewards";
  }
}
// QueryParamsRequest is the request type for the Query/Params RPC method
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method
message QueryParamsResponse {
  // params defines the parameters of the module
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryLockedDelegationRequest is request type for the Query/Delegation RPC method
message QueryLockedDelegationRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // delegator_addr defines the delegator address to query for
  string delegator_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // validator_addr defines the validator address to query for
  string validator_addr = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryLockedDelegationResponse is response type for the Query/Delegation RPC method
message QueryLockedDelegationResponse {
  // locked_delegation_responses defines the locked delegation info
  repeated LockedDelegationWithTotalShares locked_delegations = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];

  // total_locked is the total shares locked for the delegation
  string shares = 2 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

// QueryDelegatorLockedDelegationsRequest is request type for the Query/DelegatorDelegations RPC method.
message QueryDelegatorLockedDelegationsRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // delegator_addr defines the delegator address to query for.
  string delegator_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryDelegatorLockedDelegationsResponse is response type for the
// Query/DelegatorDelegations RPC method.
message QueryDelegatorLockedDelegationsResponse {
  // locked_delegation_responses defines the locked delegation info
  repeated LockedDelegationWithTotalShares locked_delegations = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryLockedDelegationRewardsRequest is the request type for the
// Query/LockedDelegationRewards RPC method
message QueryLockedDelegationRewardsRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // delegator_address defines the delegator address to query for.
  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // validator_address defines the validator address to query for.
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryLockedDelegationRewardsResponse is the response type for the
// Query/LockedDelegationRewards RPC method
message QueryLockedDelegationRewardsResponse {
  // distribution_reward is the reward from the distribution module
  repeated cosmos.base.v1beta1.DecCoin distribution_reward = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true
  ];
  // locking_reward is the reward from the locking module
  repeated cosmos.base.v1beta1.DecCoin locking_reward = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true
  ];
  // total is the sum between the distribution_reward and the locking_reward
  repeated cosmos.base.v1beta1.DecCoin total = 3 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true
  ];
}

// QueryLockedDelegationTotalRewardsRequest is the request type for the
// Query/LockedDelegationTotalRewards RPC method
message QueryLockedDelegationTotalRewardsRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;
  // delegator_address defines the delegator address to query for
  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryLockedDelegationTotalRewardsResponse is the response type for the
// Query/LockedDelegationTotalRewards RPC method
message QueryLockedDelegationTotalRewardsResponse {
  // rewards defines all the rewards accrued by a delegator.
  repeated LockedDelegationDelegatorReward rewards = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
  // total defines the sum of all the rewards.
  repeated cosmos.base.v1beta1.DecCoin total = 2 [
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"
  ];
}
